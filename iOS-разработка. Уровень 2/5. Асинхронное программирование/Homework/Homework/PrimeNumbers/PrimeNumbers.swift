import UIKit
import RxSwift
import RxCocoa
// Skillbox
// –°–∫–∏–ª–ª–±–æ–∫—Å
/*
 –æ–¥–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –≤–≤–æ–¥–æ–º —á–∏—Å–ª–∞ –∏ –∫–Ω–æ–ø–∫–∞ ‚Äú–†–∞—Å—Å—á–∏—Ç–∞—Ç—å‚Äù.
 –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ (–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∏ —Å–µ–±—è) –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –¥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.
 –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –≤–º–µ—Å—Ç–µ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Ä–∞—Å—á–µ—Ç–∞ —ç—Ç–∏—Ö —á–∏—Å–µ–ª (—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —É—à–ª–æ –Ω–∞ –ø–æ–∏—Å–∫ —ç—Ç–∏—Ö —á–∏—Å–µ–ª).
 */
extension String {
    var isNumeric: Bool {
        return NumberFormatter().number(from: self) != nil
    }
}
class PrimeNumbers: UIViewController {
    @IBOutlet weak var Input: UITextField!
    @IBOutlet weak var Output: UITextView!
    
    let disposeBag = DisposeBag()
    
    //MARK: viewWillAppear == Main queue
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        Input.rx.text.orEmpty.filter{(Int($0) ?? 0 > 0)}
            .subscribe(onNext: { text in
                self.Output.text = ""
                DispatchQueue.global(qos: .background).async {
                    print("~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~")
                    let nums = 1...Int(text)!
                    let start = CFAbsoluteTimeGetCurrent()
                    for num in nums {
                        var prime = true
                        if num == 1 {
                            prime = false
                        }
                        var i = 2
                        while (i < num) {
                            if num % i == 0 {
                                prime = false
                            }
                            i += 1
                        }
                        if prime == false {
                            let end = CFAbsoluteTimeGetCurrent()
                            print("\(num) –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ. \(Float(end-start)*1000) –º—Å")
                        } else {
                            let end = CFAbsoluteTimeGetCurrent()
                            print(">> \(num)  –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ. \(Float(end-start)*1000) –º—Å")
                            //            var primeNum = [String()]
                            //            primeNum.append("\(num) –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ.")
                            //            print(primeNum.dropFirst())
                        }
                    }}
                self.Output.text = "Result in console üòâ"
            }).disposed(by: disposeBag)
    }
}
